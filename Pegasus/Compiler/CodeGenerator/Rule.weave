@model Rule
{{
    var memoize = model.Flags.Any(f => f.Name == "memoize");
    var lexical = model.Flags.Any(f => f.Name == "lexical");
    this.currentContext = new ResultContext(
        resultName: this.CreateVariable("r"),
        resultRuleName: lexical ? model.Identifier.Name : null,
        resultType: this.types[model.Expression]);
    var leftRecursive = memoize && this.leftRecursiveRules.Contains(model);
}}
{{if model.Expression is TypedExpression}}
    private IParseResult<
        {{@RenderCode this.currentContext.ResultType}}
        > {{: model.Identifier.Name}}(ref Cursor cursor)
{{else}}
    private IParseResult<{{= this.currentContext.ResultType }}> {{: model.Identifier.Name }}(ref Cursor cursor)
{{/if}}
{
  using(var trace = this.RuleTrace("{{: model.Identifier.Name}}", ref cursor)) {
    IParseResult<{{= this.currentContext.ResultType }}> {{: this.currentContext.ResultName }} = null;
    {{if leftRecursive}}
        var storageKey = new CacheKey({{= ToLiteral(model.Identifier.Name) }}, cursor.StateKey, cursor.Location);
        if (this.storage.ContainsKey(storageKey))
        {
            {{: this.currentContext.ResultName }} = (IParseResult<{{= this.currentContext.ResultType }}>)this.storage[storageKey];
            if ({{: this.currentContext.ResultName }} != null)
            {
                cursor = {{: this.currentContext.ResultName }}.EndCursor;
            }
            return {{: this.currentContext.ResultName }};
        }
        {{
            var startCursorName = this.CreateVariable("startCursor");
            var resultName = this.currentContext.ResultName;
            var nextResultName = this.CreateVariable("r");
        }}
        this.storage[storageKey] = null;
        var {{: startCursorName }} = cursor;
        while (true)
        {
            IParseResult<{{= this.currentContext.ResultType }}> {{: nextResultName }} = null;
            {{ this.currentContext = this.currentContext.WithResultName(nextResultName); }}
            {{@WalkRule model}}
            {{ this.currentContext = this.currentContext.WithResultName(resultName); }}
            if ({{: nextResultName }} == null || ({{: this.currentContext.ResultName }} != null && {{: this.currentContext.ResultName }}.EndCursor.Location >= r1.EndCursor.Location))
            {
                break;
            }
            {{: startCursorName }} = {{: startCursorName }}.Touch();
            this.storage[new CacheKey({{= ToLiteral(model.Identifier.Name) }}, {{: startCursorName }}.StateKey, {{: startCursorName }}.Location)] = this.storage[storageKey] = {{: this.currentContext.ResultName }} = {{: nextResultName }};
            cursor = {{: startCursorName }};
        }
        if ({{: this.currentContext.ResultName }} != null)
        {
            cursor = {{: this.currentContext.ResultName }}.EndCursor;
        }
    {{elif memoize}}
        var storageKey = new CacheKey({{= ToLiteral(model.Identifier.Name) }}, cursor.StateKey, cursor.Location);
        if (this.storage.ContainsKey(storageKey))
        {
            {{: this.currentContext.ResultName }} = (IParseResult<{{= this.currentContext.ResultType }}>)this.storage[storageKey];
            if ({{: this.currentContext.ResultName }} != null)
            {
                cursor = {{: this.currentContext.ResultName }}.EndCursor;
            }
            return {{: this.currentContext.ResultName }};
        }
        {{@WalkRule model}}
        this.storage[storageKey] = {{: this.currentContext.ResultName }};
    {{else}}
        {{@WalkRule model}}
    {{/if}}
    trace.Return({{: this.currentContext.ResultName }});
    return {{: this.currentContext.ResultName }};
  } // using(trace)
}

{{
    this.currentContext = default(ResultContext);
    this.variables.Clear();
}}

@model Grammar
{{
    var settings = model.Settings.ToLookup(s => s.Key.Name, s => s.Value);
    var assemblyName = Assembly.GetExecutingAssembly().GetName();
}}
// -----------------------------------------------------------------------
// <auto-generated>
//   This code was generated by {{= assemblyName.Name }} {{= assemblyName.Version }}
//
//   Changes to this file may cause incorrect behavior and will be lost if
//   the code is regenerated.
// </auto-generated>
// -----------------------------------------------------------------------

{{
    var @namespace = settings["namespace"].SingleOrDefault() ?? "Parsers";
    var classname = settings["classname"].SingleOrDefault() ?? "Parser";
    var accessibility = settings["accessibility"].SingleOrDefault() ?? "public";
    var startRule = settings["start"].Select(n => n.ToString()).SingleOrDefault() ?? model.Rules[0].Identifier.Name;
    var resources = settings["resources"].SingleOrDefault();
    var memoize = model.Rules.SelectMany(r => r.Flags.Select(f => f.Name)).Any(f => f == "memoize");
    var lexical = model.Rules.SelectMany(r => r.Flags.Select(f => f.Name)).Any(f => f == "lexical");
    var type = this.types[model.Rules.Single(r => r.Identifier.Name == startRule).Expression];
}}
namespace
{{@RenderCode @namespace}}
{
    using System;
    using System.Collections.Generic;
    using Pegasus.Common;

    public interface IRuleTrace : IDisposable
    {
        void Return<T>(IParseResult<T> value);
    }

    public class NoTrace : IRuleTrace
    {
        private bool disposed = false;
    
        public NoTrace() {}
        public void Return<T>(IParseResult<T> value) {}
    
        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }
    
        public virtual void Dispose(bool disposing)
        {
            if(this.disposed)
            {
                throw new InvalidOperationException("this Level was already disposed!");
            }
            else
            {
                this.disposed = true;
                //ignore disposing variable because we arent freeing managed objects
            }
        }
    }

    {{each @using in settings["using"]}}
        using
            {{@RenderCode @using}}
            ;
    {{/each}}
    {{if resources != null}}
        using ParserResources =
            {{@RenderCode resources}}
            ;
    {{/if}}

    /// <summary>
    ///  Parses a string according to the rules of the <see cref="{{= classname }}" /> grammar.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("{{= assemblyName.Name }}", "{{= assemblyName.Version }}")]
    {{@RenderCode accessibility}}
    partial class
    {{@RenderCode classname}}
    {
        {{each members in settings["members"]}}
            {{@RenderCode members}}
        {{/each}}
        {{if memoize}}
            private Dictionary<CacheKey, object> storage;
        {{/if}}

        public virtual IRuleTrace RuleTrace(string rule, ref Cursor cursor) {
            return new NoTrace();
        }

        /// <summary>
        ///  Parses a string according to the rules of the <see cref="{{= classname }}" /> grammar.
        /// </summary>
        /// <param name="subject">The parsing subject.</param>
        /// <param name="fileName">The optional file name to use in error messages.</param>
        /// <returns>The <see cref="{{= type.ToString().Replace("<", "&lt;").Replace(">", "&gt;") }}" /> parsed from <paramref name="subject" />.</returns>
        /// <exception cref="FormatException">
        ///  Thrown when parsing fails against <paramref name="subject"/>.  The exception's <code>Data["cursor"]</code> will be set with the cursor where the fatal error occurred.
        /// </exception>
        {{if lexical}}
            public {{= type }} Parse(string subject, string fileName = null)
            {
                IList<LexicalElement> lexicalElements;
                return this.Parse(subject, fileName, out lexicalElements);
            }

            /// <summary>
            ///  Parses a string according to the rules of the <see cref="{{= classname }}" /> grammar.
            /// </summary>
            /// <param name="subject">The parsing subject.</param>
            /// <param name="fileName">The optional file name to use in error messages.</param>
            /// <param name="lexicalElements">When this method returns, contains the lexical elements for the parsing subject. This parameter is passed uninitialized.</param>
            /// <returns>The <see cref="{{= type.ToString().Replace("<", "&lt;").Replace(">", "&gt;") }}" /> parsed from <paramref name="subject" />.</returns>
            /// <exception cref="FormatException">
            ///  Thrown when parsing fails against <paramref name="subject"/>.  The exception's <code>Data["cursor"]</code> will be set with the cursor where the fatal error occurred.
            /// </exception>
        {{/if}}
        public {{= type }} Parse(string subject, string fileName{{if !lexical}} = null{{else}}, out IList<LexicalElement> lexicalElements{{/if}})
        {
            {{if memoize}}
                try
                {
                    this.storage = new Dictionary<CacheKey, object>();
                    var cursor = new Cursor(subject, 0, fileName);
                    var result = this.{{: startRule }}(ref cursor);
                    if (result == null)
                    {
                        throw ExceptionHelper(cursor, state => "Failed to parse '{{= startRule }}'.");
                    }
                    {{if lexical}}
                        var lexical = (cursor["_lexical"] as ListNode<LexicalElement>).ToList();
                        lexical.Reverse();
                        lexicalElements = lexical.AsReadOnly();
                    {{/if}}
                    return result.Value;
                }
                finally
                {
                    this.storage = null;
                }
            {{else}}
                var cursor = new Cursor(subject, 0, fileName);
                var result = this.{{: startRule }}(ref cursor);
                if (result == null)
                {
                    throw ExceptionHelper(cursor, state => "Failed to parse '{{= startRule }}'.");
                }
                {{if lexical}}
                    var lexical = (cursor["_lexical"] as ListNode<LexicalElement>).ToList();
                    lexical.Reverse();
                    lexicalElements = lexical.AsReadOnly();
                {{/if}}
                return result.Value;
            {{/if}}
        }

        {{@WalkGrammar model}}
        private IParseResult<string> ParseLiteral(ref Cursor cursor, string literal, bool ignoreCase = false{{if lexical}}, string ruleName = null{{/if}})
        {
            if (cursor.Location + literal.Length <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, literal.Length);
                if (ignoreCase ? substr.Equals(literal, StringComparison.OrdinalIgnoreCase) : substr == literal)
                {
                    var endCursor = cursor.Advance(substr.Length);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr{{if lexical}}, ruleName{{/if}});
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseClass(ref Cursor cursor, string characterRanges, bool negated = false, bool ignoreCase = false{{if lexical}}, string ruleName = null{{/if}})
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var c = cursor.Subject[cursor.Location];
                bool match = false;
                for (int i = 0; !match && i < characterRanges.Length; i += 2)
                {
                    match = c >= characterRanges[i] && c <= characterRanges[i + 1];
                }
                if (!match && ignoreCase && (char.IsUpper(c) || char.IsLower(c)))
                {
                    var cs = c.ToString();
                    for (int i = 0; !match && i < characterRanges.Length; i += 2)
                    {
                        var min = characterRanges[i];
                        var max = characterRanges[i + 1];
                        for (char o = min; !match && o <= max; o++)
                        {
                            match = (char.IsUpper(o) || char.IsLower(o)) && cs.Equals(o.ToString(), StringComparison.CurrentCultureIgnoreCase);
                        }
                    }
                }
                if (match ^ negated)
                {
                    var endCursor = cursor.Advance(1);
                    var substr = cursor.Subject.Substring(cursor.Location, 1);
                    var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr{{if lexical}}, ruleName{{/if}});
                    cursor = endCursor;
                    return result;
                }
            }
            return null;
        }

        private IParseResult<string> ParseAny(ref Cursor cursor{{if lexical}}, string ruleName = null{{/if}})
        {
            if (cursor.Location + 1 <= cursor.Subject.Length)
            {
                var substr = cursor.Subject.Substring(cursor.Location, 1);
                var endCursor = cursor.Advance(1);
                var result = this.ReturnHelper<string>(cursor, ref endCursor, state => substr{{if lexical}}, ruleName{{/if}});
                cursor = endCursor;
                return result;
            }
            return null;
        }

        private IParseResult<T> ReturnHelper<T>(Cursor startCursor, ref Cursor endCursor, Func<Cursor, T> wrappedCode{{if lexical}}, string ruleName = null{{/if}})
        {
            {{if lexical}}
                if (ruleName != null)
                {
                    var state = endCursor.WithMutability(true);
                    var element = new LexicalElement { StartCursor = startCursor, EndCursor = endCursor, Name = ruleName };
                    state["_lexical"] = (state["_lexical"] as ListNode<LexicalElement>).Push(element);
                    element.EndCursor = endCursor = state.WithMutability(false);
                }
            {{/if}}
            var result = wrappedCode(endCursor);
            var lexical = result as ILexical;
            if (lexical != null && lexical.StartCursor == null && lexical.EndCursor == null)
            {
                lexical.StartCursor = startCursor;
                lexical.EndCursor = endCursor;
            }
            return new ParseResult<T>(startCursor, endCursor, result);
        }

        private Exception ExceptionHelper(Cursor cursor, Func<Cursor, string> wrappedCode)
        {
            var ex = new FormatException(wrappedCode(cursor));
            ex.Data["cursor"] = cursor;
            return ex;
        }

        private T ValueOrDefault<T>(IParseResult<T> result)
        {
            return result == null
                ? default(T)
                : result.Value;
        }
    }
}
